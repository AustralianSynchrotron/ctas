

kernel void  formframe (
             global float*  out,
  read_only  global float*  im0,
  read_only  global float*  im1,
  read_only  global float*  gaps0,
  read_only  global float*  gaps1)
{
  const int idi = get_global_id(0);
  if ( gaps0[idi] == 0.0 && gaps1[idi] == 0.0 )
    out[idi] = 0.0; // 0.0 would be safe to see on the image?
  else if ( gaps0[idi] == 0.0 )
    out[idi] = im1[idi];
  else if ( gaps1[idi] == 0.0 )
    out[idi] = im0[idi];
  else
    out[idi] = ( im0[idi]*gaps0[idi] + im1[idi]*gaps1[idi] )
             / ( gaps0[idi] + gaps1[idi] ) ;
}


__constant const float sig = 0.45;
__constant const float gdiv = 2*sig*sig;

kernel void  eqnoise (
  read_only            int  Xs,
  read_only            int  Ys,
  read_only  global float*  iim,
             global float*  oim,
  read_only  global float*  gaps0,
  read_only  global float*  gaps1)
{
  int idx = get_global_id(0);
  int idy = get_global_id(1);
  int idi = idx + idy * Xs;
  oim[idi]=iim[idi];
  float wght = gaps0[idi] + gaps1[idi];
  if (wght==0 || wght>=2.0)
    return;


  float mass=0.0;
  float gsumd=0;
  for (int dy = -1 ; dy <= 1 ; dy++) {
    int idyy = idy+dy;
    if (idyy<0 || idyy>=Ys)
      continue;
    int idiy = idyy * Xs;
    for (int dx = -1 ; dx <= 1 ; dx++) {
      int idxx = idx+dx;
      if (idyy<0 || idyy>=Ys)
        continue;
      int idii = idiy + idxx;
      float lwght = gaps0[idii] + gaps1[idii];
      if (lwght==0)
        continue;
      //float gwght = exp(-(dx*dx + dy*dy)/gdiv);
      mass += 1.0;
      gsumd += iim[idii];
    }
  }
  if (mass<=1)
    return;
  float gmean = gsumd/mass;

  gsumd=0.0;
  mass=0.0;
  for (int dy = -1 ; dy <= 1 ; dy++) {
    int idyy = idy+dy;
    if (idyy<0 || idyy>=Ys)
      continue;
    int idiy = idyy * Xs;
    for (int dx = -1 ; dx <= 1 ; dx++) {
      int idxx = idx+dx;
      if (idyy<0 || idyy>=Ys)
        continue;
      int idii = idiy + idxx;
      float lwght = gaps0[idii] + gaps1[idii];
      if (lwght==0)
        continue;
      float gwght = exp(-(dx*dx + dy*dy)/gdiv);
      float dd = iim[idii] - gmean;
      mass += gwght;
      gsumd += gwght * dd*dd;
    }
  }
  gsumd /= mass;
  oim[idi] = gmean + sign(iim[idi]-gmean) * sqrt(gsumd/2);
  return;

}


//kernel void  gapfill (
//  read_only            int  Xs,
//  read_only            int  Ys,
//             global float*  iim,
//             global float*  oim,
//  read_only            int  atLeast,
//  read_only            int  pass)
//{
//  const int idx = get_global_id(0);
//  const int idy = get_global_id(1);
//  const int idi = idx + idy * Xs;
//  if (iim[idi]!=0.0)
//    return;
//  float * src = pass ? oim : iim;
//  float * dst = pass ? iim : oim;
//  dst[idi]=src[idi];
//
//  int dots=0;
//  for (int dy = -1 ; dy <= 1 ; dy++) {
//    int idyy = idy+dy;
//    if (idyy<0 || idyy>=Ys)
//      continue;
//    int idiy = idyy * Xs;
//    for (int dx = -1 ; dx <= 1 ; dx++) {
//      int idxx = idx+dx;
//      int idii = idiy + idxx;
//      if (idxx<0 || idxx>=Xs || idi==idii || 0==src[idii])
//        continue;
//      dots++;
//    }
//  }
//  if (dots<atLeast)
//    return;
//
//  float mass=0.0;
//  float gsum=0.0;
//  for (int dy = -1 ; dy <= 1 ; dy++) {
//    int idyy = idy+dy;
//    if (idyy<0 || idyy>=Ys)
//      continue;
//    int idiy = idyy * Xs;
//    for (int dx = -1 ; dx <= 1 ; dx++) {
//      int idxx = idx+dx;
//      int idii = idiy + idxx;
//      if (idxx<0 || idxx>=Xs || idi==idii || 0==src[idii])
//        continue;
//      float gwght = exp(-(dx*dx + dy*dy)/gdiv);
//      mass += gwght;
//      gsum += gwght * iim[idii];
//    }
//  }
//  if (mass==0)
//    return;
//  dst[idi] = gsum/mass;
//}





//// gaussian of extremes
//  float mass=0.0;
//  float gsum=0.0;
//  bool isMax=true;
//  bool isMin=true;
//  for (int dy = -1 ; dy <= 1 ; dy++) {
//    int idyy = idy+dy;
//    if (idyy<0 || idyy>=Ys)
//      continue;
//    int idiy = idyy * Xs;
//    for (int dx = -1 ; dx <= 1 ; dx++) {
//      int idxx = idx+dx;
//      if (idxx<0 || idxx>=Xs)
//        continue;
//      int idii = idiy + idxx;
//
//      if ( gaps0[idii] + gaps1[idii] == 0.0 )
//        continue;
//      if (iim[idii]>iim[idi])
//        isMax=false;
//      if (iim[idii]<iim[idi])
//        isMin=false;
//      if (!isMax && !isMin)
//        return;
//      float gwght = exp(-(dx*dx + dy*dy)/gdiv);
//      mass += gwght;
//      gsum += gwght * iim[idii];
//
//    }
//  }
//  if (mass==0)
//    return;
//  oim[idi] = gsum/mass;


//// standard deviation
//int dots=0;
//float sumd=0;
//float arr[9];
//for (int dy = -1 ; dy <= 1 ; dy++) {
//  int idyy = idy+dy;
//  if (idyy<0 || idyy>=Ys)
//    continue;
//  int idiy = idyy * Xs;
//  for (int dx = -1 ; dx <= 1 ; dx++) {
//    int idxx = idx+dx;
//    if (idyy<0 || idyy>=Ys)
//      continue;
//    int idii = idiy + idxx;
//    float lwght = gaps0[idii] + gaps1[idii];
//    if (lwght==0 || lwght>=2.0)
//      continue;
//    sumd += iim[idii];
//    arr[dots++] = iim[idii];
//  }
//}
//if (dots<2)
//  return;
//
//float mean = sumd/dots;
//sumd = 0;
//for (int idl=0; idl<dots; idl++) {
//  float dd = arr[idl]-mean;
//  sumd += dd*dd;
//}
//sumd /= dots;
//oim[idi] = mean + sign(iim[idi]-mean) * sqrt(sumd/2);


//// random
//float arr[8];
//for (int dy = -1 ; dy <= 1 ; dy++) {
//  int idyy = idy+dy;
//  int idiy = idyy * Xs;
//  for (int dx = -1 ; dx <= 1 ; dx++) {
//    int idxx = idx+dx;
//    int idii = idiy + idxx;
//    if ( idii != idi  &&  gaps0[idii] + gaps1[idii] > 0.0 )
//      arr[dots++] = iim[idii];
//  }
//}
//if (!dots)
//  return;
//if (dots==1)
//  ov = arr[0];
//else {
//  float iv = iim[idi];
//  int prand = *(int*)(void*)(&iv);
//  ov = arr[prand % dots];
//}


//// mean
//float sumd=0;
//for (int dy = -1 ; dy <= 1 ; dy++) {
//  int idyy = idy+dy;
//  int idiy = idyy * Xs;
//  for (int dx = -1 ; dx <= 1 ; dx++) {
//    int idxx = idx+dx;
//    int idii = idiy + idxx;
//    if ( idii != idi  &&  gaps0[idii] + gaps1[idii] > 0.0 ) {
//      sumd += iim[idii];
//      dots += 1;
//    }
//  }
//}
//if (!dots)
//  return;
//ov = sumd/dots;


//// median
//  float arr[8];
//  for (int dy = -1 ; dy <= 1 ; dy++) {
//    int idyy = idy+dy;
//    if (idyy<0 || idyy>=Ys)
//      continue;
//    int idiy = idyy * Xs;
//    for (int dx = -1 ; dx <= 1 ; dx++) {
//      int idxx = idx+dx;
//      if (idxx<0 || idxx>=Xs)
//       continue;
//      int idii = idiy + idxx;
//      if ( idii != idi  &&  gaps0[idii] + gaps1[idii] > 0.0 )
//        arr[dots++] = iim[idii];
//    }
//  }
//  if (!dots)
//    return;
//
//  for (int i = 0; i < dots - 1; i++)
//    for (int j = 0; j < dots - i - 1; j++)
//      if (arr[j] > arr[j + 1]) {
//        float sw = arr[j];
//        arr[j] = arr[j+1];
//        arr[j+1] = sw;
//      }
//  ov = arr[dots/2];

